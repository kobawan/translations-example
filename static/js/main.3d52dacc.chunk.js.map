{"version":3,"sources":["components/app/App.module.scss","components/content/Content.module.scss","context.ts","translations.ts","components/content/Content.tsx","serviceWorker.js","index.js","components/app/App.tsx"],"names":["module","exports","Lang","LanguageContext","createContext","en","LanguageContextProvider","Provider","translations","welcome","pt","se","Content","lang","useContext","flag","role","aria-label","getFlagFromContext","className","styles","content","style","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","useState","setLang","updateLang","e","currentTarget","name","value","app","header","Object","keys","map","language","langButton","onClick","toUpperCase","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,WAAa,0B,kBCAnFD,EAAOC,QAAU,CAAC,QAAU,2B,gGCChBC,E,yDAAAA,K,QAAAA,E,QAAAA,E,SAAAA,M,KAML,IAAMC,EAAkBC,wBAAoBF,EAAKG,IAE3CC,EAA0BH,EAAgBI,S,gCCV1CC,EAAe,CAC1BH,GAAI,CACFI,QAAS,WAEXC,GAAI,CACFD,QAAS,aAEXE,GAAI,CACFF,QAAS,iBCUAG,EAAoB,WAC/B,IAAMC,EAAOC,qBAAWX,GAClBY,EAfmB,SAACF,GAC1B,OAAOA,GACL,KAAKX,EAAKG,GACR,OAAO,0BAAMW,KAAK,MAAMC,aAAW,gBAA5B,4BACT,KAAKf,EAAKQ,GACR,OAAO,0BAAMM,KAAK,MAAMC,aAAW,mBAA5B,4BACT,KAAKf,EAAKS,GACN,OAAO,0BAAMK,KAAK,MAAMC,aAAW,gBAA5B,4BACX,QACE,OAAO,MAMEC,CAAmBL,GAEhC,OACE,yBAAKM,UAAWC,IAAOC,SACrB,4BAAKN,EAAL,IAAYP,EAAaK,GAAMJ,QAA/B,IAAyCM,GACzC,0BAAMC,KAAK,MAAMC,aAAW,QAAQK,MAAO,CAAEC,SAAU,QAAvD,kBCbcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDa,WAAO,IAAD,EACTC,mBAAS7B,EAAKG,IADL,mBAC1BQ,EAD0B,KACpBmB,EADoB,KAE3BC,EAAa,SAACC,GAClBF,EAAQE,EAAEC,cAAcC,OAW1B,OACE,kBAAC9B,EAAD,CAAyB+B,MAAOxB,GAC9B,yBAAKM,UAAWC,IAAOkB,KACrB,4BAAQnB,UAAWC,IAAOmB,QAVvBC,OAAOC,KAAKvC,GAAMwC,KAAI,SAAAC,GAAQ,OACnC,4BAAQxB,UAAWC,IAAOwB,WAAYR,KAAMO,EAAUE,QAASZ,GAC5DU,EAASG,mBAWV,kBAAC,EAAD,UDnBQ,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d52dacc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2I7Ip\",\"header\":\"App_header__3FcCA\",\"langButton\":\"App_langButton__vO8n_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__2tJ5K\"};","import { createContext } from \"react\";\n\nexport enum Lang {\n  en = \"en\",\n  pt = \"pt\",\n  se = \"se\",\n}\n\nexport const LanguageContext = createContext<Lang>(Lang.en);\n\nexport const LanguageContextProvider = LanguageContext.Provider;\n","export const translations = {\n  en: {\n    welcome: \"Welcome\",\n  },\n  pt: {\n    welcome: \"Bem-vindo\",\n  },\n  se: {\n    welcome: \"V√§lkommen\",\n  }\n}","import React, { useContext } from \"react\";\nimport { LanguageContext, Lang } from \"../../context\";\nimport styles from \"./Content.module.scss\";\nimport { translations } from \"../../translations\";\n\nconst getFlagFromContext = (lang: Lang) => {\n  switch(lang) {\n    case Lang.en:\n      return <span role=\"img\" aria-label=\"british-flag\">üá¨üáß</span>;\n    case Lang.pt:\n      return <span role=\"img\" aria-label=\"portuguese-flag\">üáµüáπ</span>;\n    case Lang.se:\n        return <span role=\"img\" aria-label=\"swedish-flag\">üá∏üá™</span>;\n    default:\n      return null;\n  }\n}\n\nexport const Content: React.FC = () => {\n  const lang = useContext(LanguageContext);\n  const flag = getFlagFromContext(lang);\n\n  return (\n    <div className={styles.content}>\n      <h1>{flag} {translations[lang].welcome} {flag}</h1>\n      <span role=\"img\" aria-label=\"koala\" style={{ fontSize: \"2em\", }}>üê®</span>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { LanguageContextProvider, Lang } from \"../../context\";\nimport styles from \"./App.module.scss\";\nimport { Content } from \"../content/Content\";\n\nexport const App: React.FC = () => {\n  const [lang, setLang] = useState(Lang.en)\n  const updateLang = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setLang(e.currentTarget.name as Lang)\n  }\n\n  const renderButtons = () => {\n    return Object.keys(Lang).map(language => (\n      <button className={styles.langButton} name={language} onClick={updateLang}>\n        {language.toUpperCase()}\n      </button>\n    ));\n  }\n\n  return (\n    <LanguageContextProvider value={lang}>\n      <div className={styles.app}>\n        <header className={styles.header}>\n          {renderButtons()}\n        </header>\n        <Content />\n      </div>\n    </LanguageContextProvider>\n  );\n};\n"],"sourceRoot":""}